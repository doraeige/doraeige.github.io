<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hey,Sophia!</title>
  
  <subtitle>胡诌乱编，沆瀣一气</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-01T10:04:40.736Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiaoyaliu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原型继承</title>
    <link href="http://yoursite.com/2019/03/01/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2019/03/01/原型继承/</id>
    <published>2019-03-01T08:16:59.000Z</published>
    <updated>2019-03-01T10:04:40.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型、原型链"><a href="#原型、原型链" class="headerlink" title="原型、原型链"></a>原型、原型链</h2><hr><blockquote><p>JavaScript 常被描述为一种基于原型的语言 (prototype-based language)。每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法。</p></blockquote><p>准确地说，这些属性和方法定义在 Object的构造器函数(constructor functions)之上的 <code>prototype</code> 属性上，而非对象实例本身。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><hr><p>我的父母是黑色头发，我也是黑色的头发。可以看出，我从我父母那里遗传了黑头发基因。</p><p>在 JavaScript 中 继承是指一个对象基于另一个对象。</p><blockquote><p>假设有一个新建的 car 对象的构造函数，每个 car 对象都具有不同的颜色属性值，例如 红色、蓝色和绿色；对象不仅具有自己的属性，而且与通用对象秘密关联，这种通用对象称之为原型；我们可以向原型中添加 car 对象都能共享的方法 drive方法 ，因此在每次新建一个 car 时，它们可以共享相同的 drive 方法，而不是创建新的 drive 方法。</p></blockquote><p>和其他语言不同，JavaScript 利用原型来管理继承。</p><h2 id="添加方法到原型"><a href="#添加方法到原型" class="headerlink" title="添加方法到原型"></a>添加方法到原型</h2><hr><p>还记得吗，对象包含数据（即属性）和操纵数据的手段（即方法）。在此之前，我们都是将方法直接添加到构造函数本身：</p><pre><code>function Cat() {    this.lives = 9;    this.sayName = function () {        console.log(`Meow! My name is ${this.name}`);    };}</code></pre><p>这样，通过将一个函数保存到新创建的 <code>Cat</code> 对象的 <code>sayName</code> 属性中，可以将 <code>sayName()</code> 方法添加到所有 <code>Cat</code> 对象上。这样做没问题，但是如果我们想用这个构造函数实例化更多的 <code>Cat</code> 对象呢？你每一次都要为这个 <code>Cat</code> 对象的 <code>sayName</code> 创建一个新的函数！更重要的是：如果你想对方法进行更改，则必须<em>逐个更新所有对象。在这种情况下，最好是让同一个 <code>Cat</code> 构造函数所创建的所有对象共享</em>一个 <code>sayName</code> 方法。</p><p>为了节省内存并保持简洁，我们可以在构造函数的 <code>prototype</code> 属性中添加方法。原型只是一个对象，构造函数所创建的所有对象都会保持对原型的引用。这些对象甚至可以将       <code>prototype</code> 的属性当作自身属性来使用！</p><p>JavaScript 利用对象与其原型之间的这个秘密链接来实现继承。请考虑以下原型链：</p><p><img src="/images/prototype.png" alt="原型链"></p><p>还记得吗，每个函数都有一个 <code>prototype</code> 属性，它其实只是一个对象。当使用 new 运算符将该函数作为构造函数来调用时，它会创建并返回一个新的对象。该对象被秘密地链接到其构造函数的 <code>prototype</code>，而这个秘密链接让该对象可以访问 <code>prototype</code> 的属性和方法，就像它自己的一样！</p><p>由于我们知道 <code>prototype</code> 属性仅仅指向一个普通对象，因此<em>这个对象本身也有一个秘密链接指向它的原型。而且，这个原型对象也有引用指向它自己的</em>原型，以此类推。原型链就是这样形成的。</p><p>无论你是访问属性（例如 <code>bailey.lives</code>;）还是调用方法（即 <code>bailey.meow()</code>;），JavaScript 解释器都会按照特定的顺序在原型链中查找它们：</p><ul><li>首先，JavaScript 引擎将查看对象自身的属性。这意味着，直接在该对象中定义的任何属性和方法将优先于其他位置的任何同名属性和方法（类似于作用域链中的变量阴影）。</li><li>如果找不到目标属性，它将搜索对象的构造函数的原型，以寻找匹配。</li><li>如果原型中不存在该属性，则 JavaScript 引擎将沿着该链继续查找。</li><li>该链的最顶端是 Object() 对象，也就是顶级父对象。如果_仍然_找不到该属性，则该属性为未定义。</li></ul><p>之前，我们都是直接在构造函数中定义方法。让我们来看看，如果我们转而在构造函数的 prototype 中定义方法，情况又会如何！</p><pre><code>function Dog(age, weight, name) {    this.age = age;    this.weight = weight;    this.name = name;    this.bark = function () {        console.log(`${this.name} says woof!`);    };}</code></pre><blockquote><p>这是 Dog 构造函数，我们可以调用它来创建一个具有以下四种属性的对象：age, weight, name 和 bark， 可以在构造器中定义 bark 方法，我们也可以将 bark 方法移到 dog 的原型中，直接使用点记法来定义 bark，像这样:</p></blockquote><pre><code>Dog.prototype.bark = function () {    console.log(`${this.name} says woof!`);};</code></pre><p>函数就变为:</p><pre><code>function Dog(age, weight, name) {    this.age = age;    this.weight = weight;    this.name = name;}Dog.prototype.bark = function () {    console.log(`${this.name} says woof!`);};</code></pre><p>现在，我们将调用 dog 的构造函数来创建一个新的对象, 并调用这个新的 dog 的 bark方法:</p><pre><code>dog1 = new Dog(2, 60, &apos;Java&apos;);dog2 = new Dog(4, 55, &apos;Jodi&apos;);dog1.bark();  // Java says woof!dog2.bark();  // Jodi says woof!</code></pre><p>让我们回顾一下，发生了什么？</p><blockquote><p>当我们在新建的 dog 对象中调用 bark 方法时，JavaScript 引擎会查看自己的属性，尝试找到与 bark 方法相匹配的名称，由于 bark 没有直接定义在这个 dog 上，它会看看 bark 方法的原型，最后，我们不需要调用 <code>dog.prototype.bark()</code>，我们只需要调用 <code>dog.bark()</code> 就会起作用，因为这个 dog 对象已经通过它的原型与 bark 方法联系起来了。</p></blockquote><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><hr><pre><code>// (A)function Dalmatian (name) {    this.name = name;    this.bark = function() {        console.log(`${this.name} barks!`);    };}// (B)function Dalmatian (name) {    this.name = name;}Dalmatian.prototype.bark = function() {    console.log(`${this.name} barks!`);};</code></pre><blockquote><p>第一题: 假设我们想定义一个可以在 Dalmatian 构造函数的实例（对象）上调用的方法（我们将会实例化至少 101 个对象！）。前面两种方式中的哪一种是最佳选择？</p></blockquote><p><strong>参考答案：</strong> (B)是最佳选择，因为每次创建 Dalmatian 的实例时，将不需要重新创建 bark 所指向的函数。</p><h2 id="替换-prototype-对象"><a href="#替换-prototype-对象" class="headerlink" title="替换 prototype 对象"></a>替换 <code>prototype</code> 对象</h2><hr><p>如果完全替换某个函数的 prototype 对象，结果会怎样？这将如何影响该函数所创建的对象？让我们来看一个简单的 Hamster 构造函数，并实例化一些对象：</p><pre><code>function Hamster() {     this.hasFur = true; };let waffle = new Hamster(); let pancake = new Hamster();</code></pre><p>首先要注意的是，在创建新的对象 waffle 和 pancake 之后，我们仍然可以为 Hamster 的原型添加属性，而且它仍然可以访问这些新的属性。</p><pre><code>Hamster.prototype.eat = function () {     console.log(&apos;Chomp chomp chomp!&apos;); };waffle.eat(); // &apos;Chomp chomp chomp!&apos;pancake.eat(); // &apos;Chomp chomp chomp!&apos;</code></pre><p>现在，让我们将 <code>Hamster</code> 的 <code>prototype</code> 对象完全替换为其他内容：</p><pre><code>Hamster.prototype = {    isHungry: false,    color: &apos;brown&apos;};</code></pre><p>先前的对象无法访问更新后的原型的属性；它们只会保留与旧原型的秘密链接：</p><pre><code>console.log(waffle.color); // undefinedwaffle.eat(); // &apos;Chomp chomp chomp!&apos;console.log(pancake.isHungry); // undefined </code></pre><p>事实证明，此后创建的任何新的 <code>Hamster</code> 对象都会使用更新后的原型：</p><pre><code>const muffin = new Hamster();muffin.eat(); // TypeError: muffin.eat is not a functionconsole.log(muffin.isHungry); // falseconsole.log(muffin.color); // &apos;brown&apos; </code></pre><h2 id="检查对象的属性"><a href="#检查对象的属性" class="headerlink" title="检查对象的属性"></a>检查对象的属性</h2><hr><p>正如我们刚刚所看到的，如果一个对象本身没有某个特定属性，它可以访问原型链中某个这样的属性（当然，假设它是存在的）。由于选择很多，有时可能会不好判断某个特定的属性究竟来自哪里！这里有一些有用的方法可以帮助你进行判断。</p><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty()"></a>hasOwnProperty()</h3><hr><p><code>hasOwnProperty()</code> 可以帮助你找到某个特定属性的来源。在向其传入你要查找的属性名称的字符串后，该方法会返回一个布尔值，指示该属性是否属于该对象本身（即该属性 <strong>不是</strong> 被继承的）。请考虑在函数中直接定义一个属性的 <code>Phone</code> 构造函数，以及它的 <code>prototype</code> 对象的另一个属性：</p><pre><code>function Phone() {    this.operatingSystem = &apos;Android&apos;;}Phone.prototype.screenSize = 6;</code></pre><p>现在，让我们创建一个新的对象 myPhone，并检查 operatingSystem 是否为其本身的属性，也就是说，它不是从该对象的原型（或原型链上的其他地方）继承来的：</p><pre><code>const myPhone = new Phone();const own = myPhone.hasOwnProperty(&apos;operatingSystem&apos;);console.log(own);//true</code></pre><p>它确实返回为真！那么，Phone 对象的 prototype 上的 screenSize 属性又如何呢？</p><pre><code>const inherited = myPhone.hasOwnProperty(&apos;screenSize&apos;);console.log(inherited);//false</code></pre><p>使用 <code>hasOwnProperty()</code>，我们可以洞察某个属性的来源。</p><h3 id="isPrototypeOf-NaN"><a href="#isPrototypeOf-NaN" class="headerlink" title="isPrototypeOf()"></a>isPrototypeOf()</h3><hr><p>对象还可以访问 <code>isPrototypeOf()</code> 方法，该方法可以检查某个对象是否存在于另一个对象的原型链中。 使用这种方法，你可以确认某个特定的对象是否是另一个对象的原型。请看以下 <code>rodent</code> 对象：</p><pre><code>const rodent = {    favoriteFood: &apos;cheese&apos;,    hasTail: true};</code></pre><p>现在，让我们来构建一个 <code>Mouse()</code> 构造函数，并将它的 <code>prototype</code> 赋给 <code>rodent</code>：</p><pre><code>function Mouse() {    this.favoriteFood = &apos;cheese&apos;;}Mouse.prototype = rodent;</code></pre><p>如果我们创建一个新的 <code>Mouse</code> 对象，它的原型应该是 <code>rodent</code> 对象。让我们来确认一下：</p><pre><code>const ralph = new Mouse();const result = rodent.isPrototypeOf(ralph)console.log(result);//true</code></pre><p>太棒了！<code>isPrototypeOf()</code> 是确认某个对象是否存在于另一个对象的原型链中的好办法。</p><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><hr><p><code>isPrototypeOf()</code> 很有用处，但要记住，要想使用它，你必须首先掌握原型对象！如果你不确定某个对象的原型是什么呢？<code>Object.getPrototypeOf()</code> 可以帮助你解决这个问题。</p><p>使用前面的例子，让我们将 <code>Object.getPrototypeOf()</code> 的返回值存储在变量 <code>myPrototype</code> 中，然后检查它是什么：</p><pre><code>const myPrototype = Object.getPrototypeOf(ralph);console.log(myPrototype);//{ favoriteFood: &quot;cheese&quot;, hasTail: true }</code></pre><p>太棒了！<code>ralph</code> 的原型 <code>rodent</code> 对象 与 返回的结果 具有相同的属性，因为它们就是同一个对象。 <code>Object.getPrototypeOf()</code> 很适合检索给定对象的原型。</p><h3 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h3><hr><p>每次创建一个对象时，都会有一个特殊的属性被暗中分配给它：<code>constructor</code>。</p><p>访问一个对象的 <code>constructor</code> 属性会返回一个对创建该对象的构造函数的引用！</p><p>以下是一个简单的 <code>Longboard</code> 构造函数。我们还会继续创建一个新的对象，然后将其保存到一个 <code>board</code> 变量中：</p><pre><code>function Longboard() {    this.material = &apos;bamboo&apos;;}const board = new Longboard();</code></pre><p>如果我们访问 <code>board</code> 的 <code>constructor</code> 属性，我们应该会看到原来的构造函数本身：</p><pre><code>console.log(board.constructor);// function Longboard() {//    this.material = &apos;bamboo&apos;;// }</code></pre><p>好极了！请记住，如果某个对象是使用字面量表示法创建的，那么它的构造函数就是内置的 <code>Object()</code> 构造函数！</p><pre><code>const rodent = {    teeth: &apos;incisors&apos;,    hasTail: true};console.log(rodent.constructor);//function Object() { [native code] }</code></pre><h3 id="小练习-1"><a href="#小练习-1" class="headerlink" title="小练习"></a>小练习</h3><hr><blockquote><p>以下哪一项有关 <code>hasOwnProperty()</code> 的说法是正确的？请选择所有适用项：</p></blockquote><ul><li>一个对象会作为参数传递给 <code>hasOwnProperty</code></li><li>它会返回一个布尔值，指示对象是否具有所指定的属性作为其本身属性(即该属性不是被继承的)</li><li>一个字符串不能作为参数传递给 <code>hasOwnProperty()</code></li><li><code>hasOwnProperty()</code> 作为一个方法被调用到一个对象</li></ul><p><strong>参考答案：</strong> 2、4</p><blockquote><p>以下哪一项有关 <code>isProtypeOf()</code> 或 <code>getPrototypeOf()</code> 的说法是正确的？请选择所有适用项：</p></blockquote><ul><li><code>isProtypeOf()</code> 可以检查某个对象是否存在于另一个对象的原型链中</li><li><code>isProtypeOf()</code> 会接受一个参数：一个原型链将被搜索的对象</li><li><code>getProtypeOf()</code> 在构造函数的一个实例(即单个对象本身)上被调用</li><li><code>getProtypeOf()</code> 会返回传递给它的对象的原型</li></ul><p><strong>参考答案：</strong> 2、4</p><blockquote><p>以下哪一项有关 <code>constructor</code> 属性的说法是正确的？请选择所有适用项：</p></blockquote><ul><li>访问一个对象的 <code>constructor</code> 属性会返回一个对创建该对象(实例)的构造函数的引用</li><li><code>constructor</code> 属性的值只是构造函数名称的一个字符串，而不是该函数本身</li><li>每个对象都有一个 <code>constructor</code> 属性</li><li>使用字面量表示法创建的对象是用 <code>Object()</code> 构造函数构建的</li></ul><p><strong>参考答案：</strong> 1、3、4</p><blockquote><p>假设我们使用常规的对象字面量表示法来创建以下对象 <code>capitals</code>：<br>当 Object.getPrototypeOf(capitals); 被执行时，会返回什么？</p></blockquote><pre><code>const capitals = {    California: &apos;Sacramento&apos;,    Washington: &apos;Olympia&apos;,    Oregon: &apos;Salem&apos;,    Texas: &apos;Austin&apos;};</code></pre><p><strong>参考答案：</strong> 对 <code>Object()</code> 原型的引用</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><hr><p>JavaScript 中的继承是指一个对象基于另一个对象。继承让我们可以重用现有的代码，使对象具有其他对象的属性。</p><p>当使用 new 运算符将一个函数作为构造函数来调用时，该函数会创建并返回一个新的对象。这个对象会被秘密链接到其构造函数的 prototype，而它只是另一个对象。使用这个秘密链接，可以让一个对象访问原型的属性和方法，就像是它自己的一样。如果 JavaScript 没有在某个对象中找到一个特定属性，它将在原型链上继续查找。如有必要，它会一路查找到 Object()（顶级父对象）。</p><p>此外，我们还介绍了几个方法和属性，可以用于检查对象及其原型的来源和引用，即：</p><ul><li>hasOwnProperty()</li><li>isPrototypeOf()</li><li>Object.getPrototypeOf()</li><li>constructor</li></ul><p>在下一部分，我们将从子类化的角度来探索原型继承的另一方面。如果你想从一个对象中只继承几个属性，但是又想让这个对象具有其他专有属性，该怎么办呢？我们将在下一部分对原型继承进行更深入的探讨。</p><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><hr><ul><li><p>MDN 上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" target="_blank" rel="noopener">hasOwnProperty()</a></p></li><li><p>MDN 上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf" target="_blank" rel="noopener">isPropertyOf()</a></p></li><li><p>MDN 上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf" target="_blank" rel="noopener">Object.getPrototypeOf()</a></p></li><li><p>MDN 上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor" target="_blank" rel="noopener">constructor</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型、原型链&quot;&gt;&lt;a href=&quot;#原型、原型链&quot; class=&quot;headerlink&quot; title=&quot;原型、原型链&quot;&gt;&lt;/a&gt;原型、原型链&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript 常被描述为一种基于原型的语言 (prototype
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设置自己的this</title>
    <link href="http://yoursite.com/2019/02/28/%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84this/"/>
    <id>http://yoursite.com/2019/02/28/设置自己的this/</id>
    <published>2019-02-28T10:10:35.000Z</published>
    <updated>2019-03-01T09:50:17.092Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道 根据函数的调用方式 <code>this</code> 会设成不同的值，<code>Javascript</code> 提供了几种设置 <code>this</code>值的方法:</p><ul><li>call()</li><li>apply()</li><li>bind()</li></ul><blockquote><p><code>call</code> 和 <code>apply</code> 作为方法在函数上被调用，会因为参数的传入方式不同而有所不同，<code>bind</code> 是返回新函数的方法.</p></blockquote><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><hr><p><code>call()</code> 是一个直接调用到函数上的方法。我们传递给它一个单一的值，以设置为 this 的值，然后逐个传入该函数的任何参数，用逗号分隔。</p><p>请考虑以下函数 multiply()，它只会返回其两个参数的乘积：</p><pre><code>function multiply(n1, n2) {    return n1 * n2;}</code></pre><p>让我们在控制台中调用它：</p><pre><code>multiply(3, 4); // 12</code></pre><p>这里没有任何惊喜！但现在，让我们使用 <code>call()</code> 方法来调用同一个函数：</p><pre><code>multiply.call(window, 3, 4); // 12</code></pre><p>我们得到了相同的结果！这是怎么发生的？我们首先直接调用 <code>call()</code> 方法到 <code>multiply()</code> 函数上。请注意，<code>.call(window, 3, 4)</code> 之前的 <code>multiply</code> 后​​面没有任何括号！ <code>call()</code> 将会处理该调用 和 <code>multiply()</code> 函数的参数本身！</p><p>这一步完成后，我们传递将设置为 <code>this</code> 的值作为 <code>call()</code> 的第一个参数：<code>window</code>。最后，我们逐个传递 <code>multiply()</code> 函数的参数，并用逗号分隔。</p><p>当 <code>multiply.call(window, 3, 4)</code>; 执行后，该函数将以 <code>this</code> 的给定值被调用，我们所看到的结果就是 12。在严格模式之外，调用 <code>multiply()</code> 的这两种方式是等价的。</p><p>除了调用常规函数之外，我们如何调用附加到对象上的函数（即方法）呢？这是 <code>call()</code> 真正发挥强大功能的地方。使用 <code>call()</code> 来调用方法允许我们从对象中“借用”方法，然后将其用于另一个对象！请看以下对象 <code>mockingbird</code>：</p><pre><code>const mockingbird = {    title: &apos;To Kill a Mockingbird&apos;,    describe: function () {        console.log(`${this.title} is a classic novel`);    }};</code></pre><p>我们可以让 <code>mockingbird</code> 调用自己的 <code>describe()</code> 方法：</p><pre><code>mockingbird.describe();// &apos;To Kill a Mockingbird is a classic novel&apos;</code></pre><p>但是，借助 <code>call()</code>，以下 <code>pride</code> 对象可以使用 <code>mockingbird</code> 的 <code>describe()</code> 方法：</p><pre><code>const pride = {    title: &apos;Pride and Prejudice&apos;};mockingbird.describe.call(pride);// &apos;Pride and Prejudice is a classic novel&apos;</code></pre><p>让我们来分析一下当 <code>mockingbird.describe.call(pride)</code>; 被执行时，究竟发生了什么！首先，<code>call()</code> 方法被调用到 <code>mockingbird.describe</code>（它指向一个函数）上。然后，<code>this</code> 的值被传递给 <code>call()</code> 方法：<code>pride</code>。</p><p>由于 <code>mockingbird</code> 的 <code>describe()</code> 方法引用了 <code>this.title</code>，我们需要访问 this 所指向的对象的 <code>title</code> 属性。但是，由于我们已经设置了自己的 <code>this</code> 的值，<code>this.title</code> 的值将会从 <code>pride</code> 对象中被访问！结果，<code>mockingbird.describe.call(pride)</code>; 被执行，我们在控制台中看到 <code>&#39;Pride and Prejudice is a classic novel&#39;</code>。</p><p>如果你打算在传递给它的第一个参数的作用域内调用一个函数，那么 <code>call()</code> 是非常有效的。同样，我们可以利用 <code>apply()</code> 方法达到相同的目的，尽管在参数传入的方式上有所不同。让我们来仔细看看！</p><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><hr><p>就像 <code>call()</code> 一样，<code>apply()</code> 在一个函数上被调用，不仅可以调用该函数，而且还可以为它关联一个特定的 this 值。但是，<code>apply()</code> 并不是逐个传递参数并用逗号分隔，而是将函数的参数放在一个_数组_中。请回想一下之前的 <code>multiply()</code> 函数：</p><pre><code>function multiply(n1, n2) {    return n1 * n2;}</code></pre><p>我们使用了 <code>call()</code>，并逐个传递参数：</p><pre><code>multiply.call(window, 3, 4);// 12</code></pre><p>然而，使用 <code>apply()</code>，我们则是将 <code>multiply()</code> 函数的所有参数收集到一个数组中，然后再将这个数组传递给 <code>apply()</code>：</p><p>太棒了！那么，使用 <code>apply()</code> 来调用对象的方法，又会怎样呢？请回想一下之前的 <code>mockingbird</code> 和 <code>pride</code> 对象：</p><pre><code>const mockingbird = {    title: &apos;To Kill a Mockingbird&apos;,    describe: function () {        console.log(`${this.title} is a classic novel`);    }};const pride = {    title: &apos;Pride and Prejudice&apos;};</code></pre><p>之前，我们使用了 <code>call()</code> 来允许 <code>pride</code> 对象”借用” <code>mockingbird</code> 的 <code>describe()</code> 方法：</p><pre><code>mockingbird.describe.call(pride);// &apos;Pride and Prejudice is a classic novel&apos;</code></pre><p>我们可以使用 apply() 来达到相同的结果！</p><pre><code>mockingbird.describe.apply(pride);// &apos;Pride and Prejudice is a classic novel&apos;</code></pre><p>请注意，传递给 <code>call()</code> 和 <code>apply()</code> 的第一个参数是相同的（即绑定 this 值的对象）。由于 <code>describe()</code> 方法不接受任何参数，因此 <code>mockingbird.describe.call(pride)</code>; 和 <code>mockingbird.describe.apply(pride)</code>; 唯一的区别就是方法！这两种方法都会产生相同的结果。</p><h2 id="偏向选择其中一种方法"><a href="#偏向选择其中一种方法" class="headerlink" title="偏向选择其中一种方法"></a>偏向选择其中一种方法</h2><hr><p><code>call()</code> 和 <code>apply()</code> 都会在其传入的第一个参数（即作为 this 值的对象）的作用域内调用一个函数。那么，你什么时候会偏向于选择 <code>call()</code>，或偏向于选择 <code>apply()</code> 呢？</p><p>如果你事先并不知道函数所需要的参数个数，那么 <code>call()</code> 的使用可能会受到限制。在这种情况下，<code>apply()</code> 是一个更好的选择，因为它只接受一个参数数组，然后将其解包并传递给函数。请记住，解包可能会略微影响性能，但这种影响并不显著。</p><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><blockquote><p>请考虑以下 dave 对象和 sayHello() 函数：</p></blockquote><pre><code>const dave = {    name: &apos;Dave&apos;};function sayHello(message) {    console.log(`${message}, ${this.name}. You&apos;re looking well today.`);}</code></pre><p>假设你想将消息 <code>&#39;Hello, Dave. You&#39;re looking well today.&#39;</code> 输出到控制台。你应该编写哪个表达式来达到这个目的？</p><p><strong>参考答案：</strong> sayHello.apply(dave, [‘Hello’]);</p><blockquote><p>请考虑以下 Andrew 和 Richard 对象：</p></blockquote><pre><code>const Andrew = {    name: &apos;Andrew&apos;,    introduce: function () {        console.log(`Hi, my name is ${this.name}!`);    }};const Richard = {    name: &apos;Richard&apos;,    introduce: function () {        console.log(`Hello there! I&apos;m ${this.name}.`);    }};</code></pre><p>当 <code>Richard.introduce.call(Andrew)</code>; 被执行时，什么会被记录到控制台？</p><p><strong>参考答案：</strong> <code>&#39;Hello there! I&#39;m Andrew.&#39;</code></p><blockquote><p>请考虑以下代码：</p></blockquote><pre><code>const andrew = {    name: &apos;Andrew&apos;};function introduce(language) {    console.log(`I&apos;m ${this.name} and my favorite programming language is ${language}.`);}</code></pre><p>请编写一个表达式，使用 call() 方法产生以下消息：<br><code>&#39;I&#39;m Andrew and my favorite programming language is JavaScript.&#39;</code></p><p><strong>参考答案：</strong> <code>introduce.call(andrew,&#39;JavaScript&#39;)</code></p><h2 id="回调和-this"><a href="#回调和-this" class="headerlink" title="回调和 this"></a>回调和 <code>this</code></h2><hr><p>当涉及到回调函数时，this 的值有一些潜在的作用域问题，事情会变得比较棘手。接下来，让我们来看看这个问题。</p><pre><code>function invokeTwice(cb) {    cb();    cb();}const dog = {    age: 5,    growOneYear: function () {        this.age += 1;    }};</code></pre><p>首先，调用 <code>growOneYear()</code> 按预期运作，将 <code>dog</code> 对象的 <code>age</code> 属性的值从 <code>5</code> 更新为 <code>6</code>：</p><pre><code>dog.growOneYear();// undefineddog.age; // 6</code></pre><p>但是，将 <code>dog.growOneYear</code>（一个函数）作为参数传递给 <code>invokeTwice()</code> 则会产生不希望的结果：</p><pre><code>invokeTwice(dog.growOneYear);// undefineddog.age; // 6</code></pre><p>这是什么原因呢？事实证明，invokeTwice() 确实会调用 growOneYear，但它是被调用为一个 <strong>函数而不是一个方法</strong>！让我们回顾一下先前的 this 网格：</p><table><thead><tr><th style="text-align:center">Call Style</th><th style="text-align:center"><code>new</code></th><th style="text-align:center">method</th><th style="text-align:center">function</th></tr></thead><tbody><tr><td style="text-align:center"><code>this</code></td><td style="text-align:center">{}</td><td style="text-align:center">object itself</td><td style="text-align:center">global object</td></tr><tr><td style="text-align:center">Example</td><td style="text-align:center">new Cat()</td><td style="text-align:center">bailey.sayName()</td><td style="text-align:center">introduce()</td></tr></tbody></table><blockquote><p>如果使用 <code>new</code> 运算符来调用构造函数，<code>this</code> 的值将被设置为新创建的对象，如果在对象上调用方法，<code>this</code> 将被设置为该对象本身，如果简单地调用一个函数，<code>this</code> 将被设置为全局对象: <code>window</code></p></blockquote><h2 id="使用匿名闭包来保存-this"><a href="#使用匿名闭包来保存-this" class="headerlink" title="使用匿名闭包来保存 this"></a>使用匿名闭包来保存 this</h2><hr><p>还记得吗，简单地调用一个普通函数会将 <code>this</code> 的值设置为全局对象（即 <code>window</code>）。我们如何解决这个问题呢？</p><p>解决这个问题的一种方式就是使用一个匿名闭包来遮蔽 <code>dog</code> 对象：</p><pre><code>invokeTwice(function () {     dog.growOneYear(); });dog.age// 7</code></pre><p>使用这种方式，调用 <code>invokeTwice()</code> 仍然会将 <code>this</code> 的值设置为 <code>window</code>。但是，这对闭包没有影响；在匿名函数中，<code>growOneYear()</code> 方法仍然会被直接调用到 <code>dog</code> 对象上。因此，<code>dog</code> 的 age 属性的值会从 5 更新为 7。</p><p>由于这是一种十分常见的模式，因此 JavaScript 提供了另一种比较简洁的方式：<code>bind()</code> 方法。</p><h2 id="使用-bind-来保存-this"><a href="#使用-bind-来保存-this" class="headerlink" title="使用 bind() 来保存 this"></a>使用 bind() 来保存 this</h2><hr><p>与 <code>call()</code> 和 <code>apply()</code> 类似，<code>bind()</code> 方法也允许用户直接为 <code>this</code> 定义一个值。<code>bind()</code> 也是一个在函数上调用的方法，但不同于 <code>call()</code> 或 <code>apply()</code>，它们都会立即调用函数——<code>bind()</code> 会返回一个新的函数。当被调用时，该函数会将 <code>this</code> 设置为我们赋给它的值。</p><pre><code>const dog = {    age: 5,    growOneYear: function () {        this.age += 1;    }}function invokeTwice(cb) {    cb();    cb();}invokeTwice(dog.growOneYear);// undefined</code></pre><p>因为<code>bind()</code> 会返回一个新的函数，将其保存在新的变量中，称之为 <code>myGrow</code></p><pre><code>const myGrow = dog.growOneYear.bind(dog);// undefinedinvokeTwice(myGrow);// undefineddog.age;// 7</code></pre><h3 id="小练习-1"><a href="#小练习-1" class="headerlink" title="小练习"></a>小练习</h3><blockquote><p>请考虑以下 <code>driver</code> 和 <code>car</code> 对象：</p></blockquote><pre><code>const driver = {    name: &apos;Danica&apos;,    displayName: function () {        console.log(`Name: ${this.name}`);    }};const car = {    name: &apos;Fusion&apos;};</code></pre><p>请使用 <code>bind()</code> 编写一个表达式，让我们可以从 <code>driver</code> 中”借用” <code>displayName()</code> 方法，以供 <code>car</code> 对象使用。</p><p><strong>参考答案：</strong> <code>driver.displayName.bind(car)</code></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><hr><p>JavaScript 提供了三种方法，让我们可以为一个给定的函数设置 <code>this</code> 的值：</p><ul><li><code>call()</code> 会调用该函数，逐个传入参数，并用逗号分隔。</li><li><code>apply()</code> 与 <code>call()</code> 类似；它会照样调用该函数，但它会将参数作为一个数组传入。</li><li><code>bind()</code> 会返回一个新的函数，并将 this 绑定到一个特定对象，让我们可以按照函数的样式来调用它。<br>如需进一步研究，我们建议你查看 Kyle Simpson 有关 this 的你不了解 JS 系列，链接已在下方提供。</li></ul><p>到目前为止，你已经看到函数、对象和 this 关键字是如何相互关联的。你也看到了 JavaScript 中的几乎所有东西都是一个对象！你知道吗，你甚至可以将<em>对象建立在其他对象上！这是原型继承背后的主要思想。通过实现它，对象可以接受其他对象</em>的属性。接下来，我们将探索这一切，以及更多知识！</p><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><hr><ul><li><p><a href="https://github.com/doraeige/document/blob/master/js/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89.pdf" target="_blank" rel="noopener">你不知道的JavaScript（上卷）</a></p></li><li><p><a href="https://github.com/doraeige/document/blob/master/js/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89.pdf" target="_blank" rel="noopener">你不知道的JavaScript（中卷）</a></p></li><li><p><a href="https://github.com/doraeige/document/blob/master/js/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20JavaScript%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89.pdf" target="_blank" rel="noopener">你不知道的 JavaScript（下卷）</a></p></li><li><p>MDN 上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">call()</a></p></li><li><p>MDN 上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">apply()</a></p></li><li><p>MDN 上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">bind()</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道 根据函数的调用方式 &lt;code&gt;this&lt;/code&gt; 会设成不同的值，&lt;code&gt;Javascript&lt;/code&gt; 提供了几种设置 &lt;code&gt;this&lt;/code&gt;值的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call()&lt;/li&gt;
&lt;li&gt;apply()&lt;/li&gt;
      
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 的 this 用法</title>
    <link href="http://yoursite.com/2019/02/28/Javascript-%E7%9A%84-this-%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/28/Javascript-的-this-用法/</id>
    <published>2019-02-28T09:40:13.000Z</published>
    <updated>2019-02-28T11:25:47.072Z</updated>
    
    <content type="html"><![CDATA[<p><code>this</code> 是 JavaScript 语言的一个关键字。</p><h3 id="构造函数中的-this"><a href="#构造函数中的-this" class="headerlink" title="构造函数中的 this"></a>构造函数中的 this</h3><hr><p>在上一部分，我们使用了方法中的 <code>this</code> 来访问该方法所属的 <strong>对象</strong>。让我们再来看一个例子：</p><pre><code>function Cat(name) {  this.name = name  this.lives = 9;  this.sayName = function () {    console.log( &apos;Meow! My name is &apos; + this.name);  };}const bailey = new Cat();</code></pre><p>在上面的 <code>Cat()</code> 构造函数中，<code>sayName</code> 所指向的函数引用了 <code>this.name</code>。之前，我们已经看到过在方法中使用 <code>this</code>，但在这里，<code>this</code> 是指什么呢？</p><p>事实证明，当使用 <code>new</code> 运算符来调用构造函数时，<code>this</code> 会被设置为新创建的对象！让我们来看看新的 <code>bailey</code> 对象是什么样的：</p><pre><code>{  name: Bailey,  sayName: function () {     console.log(&apos;Meow! My name is &apos; + this.name);  }}</code></pre><p>在以上代码段中，请注意 this 位于构造函数 <strong>外部</strong>。正如我们在上一篇文章中所看到的，当你说 this 时，你其实是在说“这个对象”或“当前对象”。因此，<code>sayName()</code> 方法可以使用 this 来访问该对象的 <code>name</code> 属性！这使得以下方法调用成为可能：</p><pre><code> bailey.sayName();// Meow! My name is Bailey</code></pre><h2 id="this-什么时候会被赋值？"><a href="#this-什么时候会被赋值？" class="headerlink" title="this 什么时候会被赋值？"></a>this 什么时候会被赋值？</h2><hr><p>一个常见的误解是，this 指向定义它的对象。事实并非如此！直到某个对象调用使用 this 的方法，this 才会被赋值。换句话说，赋给 this 的值取决于 调用定义 this 的方法的对象。让我们来看一个例子：</p><pre><code>const dog = {  bark: function () {    console.log(&apos;Woof!&apos;);  },  barkTwice: function () {    this.bark();    this.bark();  }};</code></pre><p>让我们继续调用 <code>dog</code> 的两个方法：</p><pre><code>dog.bark();// Woof!dog.barkTwice();// Woof!// Woof!</code></pre><p>我们知道，当我们调用 <code>dog.bark()</code> 或 <code>dog.barkTwice()</code> 时，变量 <code>this</code> 将被设置。由于 <code>this</code> 可以访问调用它的对象，因此 <code>barkTwice</code> 可以使用 this 来访问包含 <code>bark</code> 方法的 <code>dog</code> 对象。<br>但是，如果我们在 <code>barkTwice</code> 中使用 <code>bark()</code>，而不是 <code>this.bark()</code>，将会怎样？该函数会先在 <code>barkTwice</code> 的作用域内查找一个名为 <code>bark</code> 的局部变量。如果没有找到 <code>bark</code>，则会沿着作用域链继续查找。<br>综合来看：<code>this.bark()</code> 会告诉 <code>barkTwice</code> 查看 <code>dog</code>（调用该方法的对象）以查找 <code>bark</code>。</p><h2 id="this-会被设置为什么？"><a href="#this-会被设置为什么？" class="headerlink" title="this 会被设置为什么？"></a>this 会被设置为什么？</h2><hr><p>到目前为止，我们已经在许多不同的上下文中看到了 <code>this</code>，比如在方法中，或被构造函数引用。现在，让我们把它们放在一起来看一下！<br>有四种方式可以调用函数，而每种方式都会不同地设置 <code>this</code>。</p><ul><li>首先，使用 new 关键字来调用构造函数会将  <code>this</code> 设置为一个新创建的对象。还记得吗，在我们之前创建 <code>Cat()</code> 的实例时，this 被设置为新的 <code>bailey</code> 对象。</li><li>另一方面，调用属于一个对象的函数（即_方法_）会将 <code>this</code> 设置为该对象本身。回想一下前面的示例，<code>dog</code> 对象的 <code>barkTwice</code> 方法能够访问 <code>dog</code> 本身的属性。</li><li><p>第三，单独调用一个函数（即简单地调用一个常规函数）将把 <code>this</code> 设置为 <code>window</code>。如果主机环境是浏览器，则它将是全局对象。</p><pre><code>function funFunction() {  return this;}funFunction();// (返回全局对象, `window`)</code></pre></li><li><p>第四种调用函数的方式可以让我们自己设置 this！现在不用在意这一点，我们将在下一部分进行深入探讨。</p></li></ul><table><thead><tr><th style="text-align:center">Call Style</th><th style="text-align:center"><code>new</code></th><th style="text-align:center">method</th><th style="text-align:center">function</th></tr></thead><tbody><tr><td style="text-align:center"><code>this</code></td><td style="text-align:center">{}</td><td style="text-align:center">object itself</td><td style="text-align:center">global object</td></tr><tr><td style="text-align:center">Example</td><td style="text-align:center">new Cat()</td><td style="text-align:center">bailey.sayName()</td><td style="text-align:center">introduce()</td></tr></tbody></table><blockquote><p>如果使用 <code>new</code> 运算符来调用构造函数，<code>this</code> 的值将被设置为新创建的对象，如果在对象上调用方法，<code>this</code> 将被设置为该对象本身，如果简单地调用一个函数，<code>this</code> 将被设置为全局对象: <code>window</code></p></blockquote><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><blockquote><p>请考虑以下构造函数 <code>City</code>：</p></blockquote><pre><code>function City(name, population) {    this.name = name;    this.population = population;    this.identify = function () {        console.log(`${this.name}&apos;s population is ${this.population}.`);    };}    </code></pre><p>当 <code>const sanFrancisco = new City(&#39;San Francisco&#39;, 870000)</code>; 被执行时，<code>this</code> 的值是什么？</p><p><strong>答案：</strong> 新创建的对象，被 <code>sanFrancisco</code> 引用</p><blockquote><p>请考虑以下对象 <code>building</code>：</p></blockquote><pre><code>const building = {    floors: 5,    addFloor: function () {        this.floors += 1;    }    };building.addFloor();</code></pre><p>当 <code>building.addFloor()</code> 被执行时，<code>this</code> 的值是什么？</p><p><strong>答案：</strong> <code>building</code></p><blockquote><p>当以下函数被调用时，this 的值是多少？</p></blockquote><pre><code>function myFunction() {    console.log(&quot;What is the value of &apos;this&apos;?&quot;);}</code></pre><p><strong>答案：</strong> <code>window</code></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><hr><p>函数、对象和 <code>this</code> 彼此相互关联。当使用 <code>new</code> 运算符来调用构造函数时，<code>this</code> 变量会被设置为新创建的对象。当在对象上调用方法时，<code>this</code> 会被设置为该对象本身。当在浏览器环境中调用函数时，<code>this</code> 会被设置为 <code>window</code>，也被称为全局对象。</p><p>除此之外，还有一组方式可以调用函数：使用 <code>apply()</code> 和使用 <code>call()</code>。这两种方式有许多相似之处，每一种方式都允许我们指定如何设置 <code>this</code>。接下来，我们会对它们进行详细分析！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;this&lt;/code&gt; 是 JavaScript 语言的一个关键字。&lt;/p&gt;
&lt;h3 id=&quot;构造函数中的-this&quot;&gt;&lt;a href=&quot;#构造函数中的-this&quot; class=&quot;headerlink&quot; title=&quot;构造函数中的 this&quot;&gt;&lt;/a&gt;构造函数中
      
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>构造函数</title>
    <link href="http://yoursite.com/2019/02/28/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/02/28/构造函数/</id>
    <published>2019-02-28T03:22:12.000Z</published>
    <updated>2019-02-28T11:31:04.011Z</updated>
    
    <content type="html"><![CDATA[<p>创建对象的一个重要方式是使用构造函数，构造函数以大写字母开头，构造函数必须始终使用特殊关键字 new 来调用，<br>与普通函数的区别是：普通函数必须创建将返回的对象并直接修改该对象，而构造函数会自动创建对象，<br>然后，为了向此对象中添加属性或方法，需要使用特殊的关键字 <code>this</code>。</p><ul><li>要实例化（即 创建 ）一个新的对象，我们可以使用 <code>new</code> 运算符来调用这个函数：<br><code>new SoftwareDeveloper()</code>;</li></ul><h1 id="构造函数：结构和语法"><a href="#构造函数：结构和语法" class="headerlink" title="构造函数：结构和语法"></a>构造函数：结构和语法</h1><hr><pre><code>function SoftwareDeveloper() {    this.favoriteLanguage = &apos;JavaScript&apos;;}</code></pre><p>首先，构造函数并不声明局部变量，而是使用 <code>this</code> 关键字来保存数据。以上函数将为所创建的任何对象添加一个 <code>favoriteLanguage</code> 属性，并为其分配一个默认值 ‘JavaScript’。现在不用太在意构造函数中的 <code>this</code>；只要知道 <code>this</code> 是指在构造函数前面使用 <code>new</code> 关键字创建的新对象即可。我们很快就会详细介绍这个 <code>this</code>！<br>最后一点比较特别的是，这个函数似乎不会返回任何东西！<code>JavaScript</code> 中的构造函数不应该有一个显式的返回值（即使用 <code>return</code> 语句）。</p><h2 id="创建一个新的对象"><a href="#创建一个新的对象" class="headerlink" title="创建一个新的对象"></a>创建一个新的对象</h2><hr><p>正如我们在上面看到的，让我们使用 new 运算符来创建一个新的对象：</p><pre><code>let developer = new SoftwareDeveloper();</code></pre><p>我们已经把这个调用的返回值保存到了变量 <code>developer</code> 中。让我们执行 <code>console.log(developer)</code>; 将这个 <code>SoftwareDeveloper</code> 对象记录到控制台：</p><pre><code>console.log(developer); // SoftwareDeveloper {favoriteLanguage: &quot;JavaScript&quot;}</code></pre><p>用对象字面量的方式来创建对象，看看有何不同</p><pre><code>let orderDeveloper = { favoriteLanguage: &apos;JavaScript&apos; };otherDeveloper; // { favoriteLanguage: &quot;JavaScript&quot; }</code></pre><p>可以看出 与 <code>developer</code> 相比，创建对象的构造函数 <code>SoftwareDeveloper</code> 没有列在Chrome 开发者工具中；<br>在 Chrome 开发者工具中 构造函数通常显示在 {} 前面；<br><code>developer</code> 的构造函数是 <code>SoftwareDeveloper</code>，而 <code>orderDeveloper</code> 的构造函数是 <code>object</code> 构造函数；比较之下，两者原型将有所不同。</p><h2 id="构造函数可以有参数"><a href="#构造函数可以有参数" class="headerlink" title="构造函数可以有参数"></a>构造函数可以有参数</h2><hr><p>与常规函数一样，使用构造函数的一个好处是它们也可以接受参数。让我们更新以上构造函数来接受一个参数，并为其分配 name 属性：</p><pre><code>function SoftwareDeveloper(name) {  this.favoriteLanguage = &apos;JavaScript&apos;;  this.name = name;}</code></pre><p>在更新的 <code>SoftwareDeveloper()</code> 函数中，无论传入函数的值是什么，它都将是对象的 <code>name</code> 属性的值。让我们来看看：</p><pre><code>let instructor = new SoftwareDeveloper(&apos;Andrew&apos;);console.log(instructor);// SoftwareDeveloper { favoriteLanguage: &apos;JavaScript&apos;, name: &apos;Andrew&apos; }</code></pre><p>正如我们在上面看到的，我们可以使用相同的构造函数来创建不同的对象：</p><pre><code>let teacher = new SoftwareDeveloper(&apos;Richard&apos;);console.log(teacher);// SoftwareDeveloper { favoriteLanguage: &apos;JavaScript&apos;, name: &apos;Richard&apos; }</code></pre><p>构造函数的好处是，我们可以调用相同的构造函数，创建无数个实例或对象。</p><h2 id="省略-new-运算符"><a href="#省略-new-运算符" class="headerlink" title="省略 new 运算符"></a>省略 new 运算符</h2><hr><p>如果你无意中 <strong>没有</strong> 使用 <code>new</code> 运算符来调用构造函数，会发生什么？</p><pre><code>function SoftwareDeveloper(name) {    this.favoriteLanguage = &apos;JavaScript&apos;;    this.name = name;}let coder = SoftwareDeveloper(&apos;David&apos;);console.log(coder);// undefined</code></pre><p>这是怎么回事？如果不使用 <code>new</code> 运算符，则不会创建对象。该函数会像任何其他常规函数一样被调用。由于该函数不会 _返回_ 任何东西（除了所有函数都会默认返回的 undefined 之外），因此 <code>coder</code> 变量最终会被分配给 <code>undefined</code>。</p><p>还有一点需要注意：由于这个函数作为一个常规函数被调用，因此 <code>this</code> 的值也会截然不同。现在不用太在意这一点，我们将在下一部分深入探讨 <code>this</code> 关键字！</p><h2 id="查看对象的构造函数-instanceof"><a href="#查看对象的构造函数-instanceof" class="headerlink" title="查看对象的构造函数(instanceof)"></a>查看对象的构造函数(instanceof)</h2><hr><p>如果我们想查看某个对象是否是用构造函数创建的呢？我们可以使用 <code>instanceof</code>（它会返回一个布尔值）来窥见一些端倪。让我们来看看吧！</p><pre><code>function Developer(name){  this.name = name;}const dev = new Developer(&apos;Veronkia&apos;);typeof dev;  // &quot;object&quot;dev instanceof Developer;  // true</code></pre><h3 id="instanceof-和原型链"><a href="#instanceof-和原型链" class="headerlink" title="instanceof 和原型链"></a>instanceof 和原型链</h3><hr><p>在以上示例中，<code>instanceof</code> 确认一个特定的构造函数确实创建了一个特定的对象。我们知道这一点，是因为我们在调用 <code>Developer()</code> 构造函数之后直接实例化了 <code>dev</code> 对象。</p><p>然而，很多时候并没有这么简单：instanceof 运算符实际上会测试构造函数是否出现在某个对象的原型链中。这意味着，虽然我们不是总能检查到底是 <em>哪个构造函数</em> 创建了该对象，但是它使我们能够洞察某个对象可能访问哪些其他的属性和方法。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><hr><p>JavaScript 的类系统是直接使用函数和对象来构建的。使用 new 运算符来调用构造函数可以实例化一个新的对象。相同的构造函数可以用于创建不同的对象。</p><p>我们在整篇中广泛讨论了函数、对象和 this。事实证明，这三者是密切相关的！ 我们将在下一部分深入探讨 this 关键字，并仔细分析这三者之间的关系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建对象的一个重要方式是使用构造函数，构造函数以大写字母开头，构造函数必须始终使用特殊关键字 new 来调用，&lt;br&gt;与普通函数的区别是：普通函数必须创建将返回的对象并直接修改该对象，而构造函数会自动创建对象，&lt;br&gt;然后，为了向此对象中添加属性或方法，需要使用特殊的关键字
      
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="Constructor" scheme="http://yoursite.com/tags/Constructor/"/>
    
      <category term="Object" scheme="http://yoursite.com/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/02/26/hello-world/"/>
    <id>http://yoursite.com/2019/02/26/hello-world/</id>
    <published>2019-02-26T11:41:00.157Z</published>
    <updated>2019-03-01T08:12:04.569Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Multiple-hexo-personalization-settings"><a href="#Multiple-hexo-personalization-settings" class="headerlink" title="Multiple hexo personalization settings"></a>Multiple hexo personalization settings</h3><p>More info: <a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">settings</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
